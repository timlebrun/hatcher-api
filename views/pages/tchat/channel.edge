@layout('layout/html')

@set('title', 'ðŸª“ Hatcher - Tchat')

@section('head')
@super

<script src="/assets/script.js"></script>
<script src="/assets/tchat.js"></script>

<style>
	.pre {
		white-space: pre;
	}
</style>
@end

@section('body')

<div id="hatcher-tchat" class="container position-relative" x-data>
	<h1 class="display-1">Tchat</h1>

	<div id="tchat-messages">
		<ol>
			<template x-for="thread in aggregateMessagesToThreads($store.tchat.messages)">

				<li class="tchat-message tchat-message-text text-white d-flex mb-3">
					<div class="me-3">
						<img src="" alt="" class="rounded-circle bg-light" style="height: 80px; width: 80px;">
					</div>
					<div class="d-flex flex-column">
						<template x-for="message in thread.messages">
							<div class="tchat-message-content bg-primary d-inline-block py-2 px-3 rounded mw-60 mb-1"
								x-data="{ paragraphs: message.content.text.split('\n\n') }">
								<template x-for="paragraph in paragraphs">
									<p x-data="{ haha: paragraph.replace('\n', '<br />') }" x-html="haha"></p>
								</template>
							</div>
						</template>

						<time class="opacity-75 text-small"
							x-data="{ date: dateFormatter.format(new Date(thread.date)) }" x-text="date"></time>
					</div>
				</li>

			</template>

			{{-- <li class="tchat-message tchat-message-text text-white d-flex justify-content-end">
				<div class="d-flex flex-column align-items-end">
					<div class="tchat-message-content bg-light text-black d-inline-block py-2 px-3 rounded mw-60 mb-1">
						<p>Bonjour c'est une phrase haha super</p>
						<p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eaque accusantium autem ratione
							pariatur, numquam facilis placeat? Similique modi beatae, est autem placeat, labore vero
							officia nobis, corrupti id numquam iure?</p>
						<p>Bonjour message salut</p>
					</div>

					<div class="tchat-message-content bg-light text-black d-inline-block py-2 px-3 rounded mw-60">
						<p>DeuxiÃ¨me message pas longtemps aprÃ¨s</p>
					</div>

					<time class="opacity-75 text-small">mercredi Ã  20h30</time>
				</div>

			</li> --}}
		</ol>
	</div>

	<div id="tchat-control" class="fixed-bottom p-3">
		<div class="input-group">
			<textarea id="tchat-input" type="text" class="form-control bg-dark text-white" rows="1"
				max-rows="-1"></textarea>
			<button class="btn btn-outline-secondary" type="button">Button</button>
		</div>
	</div>
</div>

<div id="hatcher-tchat-stats" style="position: fixed; top: 0; left: 0; color: white;">
	<p x-data x-text="$store.tchat.scroll"></p>
	<p x-data x-text="$store.tchat.scrollBottom ? 'BOTTOM' : ''"></p>
</div>

<style>
	.mw-60 {
		max-width: 60%;
	}

	.tchat-message {}

	.tchat-message-text .tchat-message-content p:last-child {
		margin-bottom: 0;
	}
</style>

<script>
	const url = new URL(window.location);

	const tchatMainElement = document.getElementById('hatcher-tchat');
	const tchatInputElement = document.getElementById('tchat-input');

	const authClient = new HatcherAuthClient('/api/auth', 'test');

	HatcherTchatClient.registerAuth(authClient);
	const tchatClient = new HatcherTchatClient(`ws://${url.host}/api/tchat`);

	const browserLanguage = guessIntlLanguage();
	const relativeTimeFormatter = new Intl.RelativeTimeFormat(browserLanguage, { style: 'short' });
	const dateFormatter = new Intl.DateTimeFormat(browserLanguage, { weekday: 'long', day: 'numeric', month: 'long', hour: 'numeric', minute: 'numeric' });
	Object.assign(window, { relativeTimeFormatter, dateFormatter });

	Alpine.store('tchat', {
		init() {},
		messages: [],
		scroll: window.scrollY,
		scrollBottom: (window.innerHeight + window.scrollY) >= document.body.offsetHeight,
	});

	const tchatStore = Alpine.store('tchat');
	Object.assign(window, { tchatStore });

	function handleScrollUpdate() {
		tchatStore.scroll = window.scrollY;
		tchatStore.scrollBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight;
		console.log(window.innerHeight, document.body.offsetHeight);
	}

	window.addEventListener('scroll', () => handleScrollUpdate());


	addEventListener("resize", (event) => console.log("resize" ,event));

	async function startup() {
		await authClient.login('tim', 'bonjour.');

		console.log(authClient.hasSession());

		tchatInputElement.setAttribute('style', `height: ${tchatInputElement.scrollHeight}px;overflow-y:hidden`);
		tchatInputElement.addEventListener('input', function() {
			this.style.height = 0;
			this.style.height = this.scrollHeight + "px";
		});

		console.log('EUH');

		// document.addEventListener('scroll', () => {
		// 	tchatStore.scroll = tchatMainElement.scrollTop;
		// 	console.log({ scroll:  tchatMainElement.scrollTop })
		// });

		tchatInputElement.addEventListener('keypress', (event) => {
			if (event.key !== "Enter") return;
			if (event.shiftKey) return;

			event.preventDefault(); // if user just ENTERed, stop the browser doing anything weird

			if (event.target.value === '') return; // If nothing in the input, just go on with our lives

			event.target.readOnly = true;
			event.target.disabled = true;

			event.target.style.height = 0;
			event.target.style.height = (event.target.scrollHeight) + "px";

			tchatClient.sendCommand(event.target.value);

			event.target.value = '';

			event.target.readOnly = false;
			event.target.disabled = false;

		});

		tchatClient.onMessage(message => {
			tchatStore.messages.push(message);

			if (tchatStore.scrollBottom) window.scrollTo(0, document.body.scrollHeight);
		});

		const messages = await tchatClient.fetchMessages();
		tchatStore.messages.push(...messages);

		console.log('WSH');
		// window.scrollTo(0, document.body.scrollHeight);
		handleScrollUpdate();

		await tchatClient.connect();
	};

	document.addEventListener('alpine:init', startup);

	// Start alpine when everything is loaded
	window.addEventListener('DOMContentLoaded', () => Alpine.start());
</script>

@end